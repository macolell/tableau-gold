
import pandas as pd
import numpy as np

#read in data
account_dim = pd.read_csv('/Users/eschenau/Library/Mobile Documents/com~apple~CloudDocs/Documents/UW MSBA/2022_Spring/Spring Practicum/Data Extracts/DataExtracts/account_dimensions.csv')
case_notes = pd.read_csv('/Users/eschenau/Library/Mobile Documents/com~apple~CloudDocs/Documents/UW MSBA/2022_Spring/Spring Practicum/Data Extracts/DataExtracts/support_cases_text_fact.csv')
support_fact = pd.read_csv('/Users/eschenau/Library/Mobile Documents/com~apple~CloudDocs/Documents/UW MSBA/2022_Spring/Spring Practicum/Data Extracts/DataExtracts/support_cases_fact.csv')
opportunity_fact = pd.read_csv('/Users/eschenau/Library/Mobile Documents/com~apple~CloudDocs/Documents/UW MSBA/2022_Spring/Spring Practicum/Data Extracts/DataExtracts/opportunity_fact.csv')
date_dim = pd.read_csv('/Users/eschenau/Library/Mobile Documents/com~apple~CloudDocs/Documents/UW MSBA/2022_Spring/Spring Practicum/Data Extracts/DataExtracts/date_dimensions.csv')
tenure = pd.read_csv('/Users/eschenau/Library/Mobile Documents/com~apple~CloudDocs/Documents/UW MSBA/2022_Spring/Spring Practicum/Data Extracts/DataExtracts/account_tenure_by_month.csv',  encoding = 'unicode_escape', engine ='python')
#join support tickets with account_dim
support_account = support_fact.merge(account_dim,
                                     on='ACCOUNTKEY',
                                     how='inner')
support_account = support_account.drop_duplicates(subset='CASE_NUMBER')

#Demonstrating whether duplications were successful
if support_account['CASE_NUMBER'].value_counts().max() == 1:
    print ("Duplicates removed.")
print("Rows: %s, Columns: %s" % (support_account.shape[0], support_account.shape[1]))

#join support_account table with tenure_dim
#joining acct tenure information to the account table where possible
# #some accounts might not have tenure information but we want to keep those accounts
support_accounts = support_account.merge(tenure,
                                         on='ACCOUNTKEY',
                                         how='left')
#dropping duplicated from left join
support_accounts = support_accounts.drop_duplicates(subset='CASE_NUMBER')
#dropping useless cols
support_accounts = support_accounts.drop(['Unnamed: 0_x', 'PREFERRED_CASE_LANGUAGE',
                                          'Unnamed: 0_y', 'REGION_y', 'REGION_x',
                                          'PARENTACCOUNTKEY', 'TOPPARENTACCOUNTKEY',
                                          'Ã¯..Tenure.Date.Value', 'Unnamed: 0'], axis =1)
#filter support_accounts
support_accounts = support_accounts[(support_accounts['ACCOUNTKEY'].isna() != True) &
                                    (support_accounts['Zero.Revenue.Flag'].isna() != True)]
#define a dict to fill NAs
fill_dict = {'PRIORITY':'None',
             'IMPACT': 'None',
             'ORIGIN': 'Other',
             'PRODUCT': 'Other',
             'CATEGORY': 'Other',
             'SUBCATEGORY': 'None',
             'CASE_CLOSED_REASON': 'None',
             'EMPLOYEECOUNT': 0}
support_accounts.fillna(value = fill_dict, inplace=True)
#sanity check

#checking the dimensions of the data
print("Rows: %s, Columns: %s" % (support_accounts.shape[0], support_accounts.shape[1]))
#column names of the new data set
print(support_accounts.columns)
#checking that all rows are 0 for the NAs
print(support_accounts.isna().sum())

#filter opportunities
closed_sales = opportunity_fact[((opportunity_fact['PRODUCTTYPE'] != 'Maintenance Renewal') |
                                (opportunity_fact['PRODUCTTYPE'] != 'License Renewal')) &
                                (opportunity_fact['ISCLOSED'] == True) &
                                (opportunity_fact['COMPARATIVESALESCREDITAMOUNT'] >0) &
                                (opportunity_fact['TERMLENGTH'] >0) &
                                (opportunity_fact['PRODUCTGROUP'].isna() != True) &
                                (opportunity_fact['ACCOUNTKEY'].isna() != True)]
#dropping useless cols
closed_sales = closed_sales.drop(['ORIGINAL_SALES_DATE', 'ISDELETED', 'ISPARTNERRELATED',
                                  'CAPACITYCOUNT', 'MAINTENANCESTARTDATE', 
                                  'MAINTENANCEENDDATE', 'PRODUCTTYPEOVERALL',
                                  'PRODUCTCATEGORY', 'STAGENAME', 'CONSOLIDATEDREASON',
                                  'PARTNERACCOUNTKEY', 'CONVERSIONOPPORTUNITYID'], axis =1)
print(closed_sales.columns)
print(closed_sales.shape)
print(closed_sales.isna().sum())

#exporting the closed sales to disk

#closed_sales.to_csv('/Users/eschenau/Library/Mobile Documents/com~apple~CloudDocs/Documents/UW MSBA/2022_Spring/Spring Practicum/Data Extracts/cleaned_opps_fact.csv')

#exporting the accounts with support tickets to disk
#support_accounts.to_csv('/Users/eschenau/Library/Mobile Documents/com~apple~CloudDocs/Documents/UW MSBA/2022_Spring/Spring Practicum/Data Extracts/cleaned_suportcases_accounts.csv')

print("File extract complete")
